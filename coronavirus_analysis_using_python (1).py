# -*- coding: utf-8 -*-
"""Coronavirus Analysis Using Python

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XTdJYsfD3f15o3sl5-kXb36NcIQCUVhl

<p><img alt="Colaboratory logo" height="45px" src="/img/colab_favicon.ico" align="left" hspace="10px" vspace="0px"></p>

<h1>What is Colaboratory?</h1>

Colaboratory, or 'Colab' for short, allows you to write and execute Python in your browser, with 
- Zero configuration required
- Free access to GPUs
- Easy sharing

Whether you're a <strong>student</strong>, a <strong>data scientist</strong> or an <strong>AI researcher</strong>, Colab can make your work easier. Watch <a href="https://www.youtube.com/watch?v=inN8seMm7UI">Introduction to Colab</a> to find out more, or just get started below!

## <strong>Getting started</strong>

The document that you are reading is not a static web page, but an interactive environment called a <strong>Colab notebook</strong> that lets you write and execute code.

For example, here is a <strong>code cell</strong> with a short Python script that computes a value, stores it in a variable and prints the result:
"""

seconds_in_a_day = 24 * 60 * 60
seconds_in_a_day

"""To execute the code in the above cell, select it with a click and then either press the play button to the left of the code, or use the keyboard shortcut 'Command/Ctrl+Enter'. To edit the code, just click the cell and start editing.

Variables that you define in one cell can later be used in other cells:
"""

seconds_in_a_week = 7 * seconds_in_a_day
seconds_in_a_week

"""Colab notebooks allow you to combine <strong>executable code</strong> and <strong>rich text</strong> in a single document, along with <strong>images</strong>, <strong>HTML</strong>, <strong>LaTeX</strong> and more. When you create your own Colab notebooks, they are stored in your Google Drive account. You can easily share your Colab notebooks with co-workers or friends, allowing them to comment on your notebooks or even edit them. To find out more, see <a href="/notebooks/basic_features_overview.ipynb">Overview of Colab</a>. To create a new Colab notebook you can use the File menu above, or use the following link: <a href="http://colab.research.google.com#create=true">Create a new Colab notebook</a>.

Colab notebooks are Jupyter notebooks that are hosted by Colab. To find out more about the Jupyter project, see <a href="https://www.jupyter.org">jupyter.org</a>.

## Data science

With Colab you can harness the full power of popular Python libraries to analyse and visualise data. The code cell below uses <strong>numpy</strong> to generate some random data, and uses <strong>matplotlib</strong> to visualise it. To edit the code, just click the cell and start editing.
"""

import numpy as np
from matplotlib import pyplot as plt

ys = 200 + np.random.randn(100)
x = [x for x in range(len(ys))]

plt.plot(x, ys, '-')
plt.fill_between(x, ys, 195, where=(ys > 195), facecolor='g', alpha=0.6)

plt.title("Sample Visualization")
plt.show()

"""You can import your own data into Colab notebooks from your Google Drive account, including from spreadsheets, as well as from GitHub and many other sources. To find out more about importing data, and how Colab can be used for data science, see the links below under <a href="#working-with-data">Working with data</a>.

## Machine learning

With Colab you can import an image dataset, train an image classifier on it, and evaluate the model, all in just <a href="https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/quickstart/beginner.ipynb">a few lines of code</a>. Colab notebooks execute code on Google's cloud servers, meaning you can leverage the power of Google hardware, including <a href="#using-accelerated-hardware">GPUs and TPUs</a>, regardless of the power of your machine. All you need is a browser.

Colab is used extensively in the machine learning community with applications including:
- Getting started with TensorFlow
- Developing and training neural networks
- Experimenting with TPUs
- Disseminating AI research
- Creating tutorials

To see sample Colab notebooks that demonstrate machine learning applications, see the <a href="#machine-learning-examples">machine learning examples</a> below.

## More resources

### Working with notebooks in Colab
- [Overview of Colaboratory](/notebooks/basic_features_overview.ipynb)
- [Guide to markdown](/notebooks/markdown_guide.ipynb)
- [Importing libraries and installing dependencies](/notebooks/snippets/importing_libraries.ipynb)
- [Saving and loading notebooks in GitHub](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb)
- [Interactive forms](/notebooks/forms.ipynb)
- [Interactive widgets](/notebooks/widgets.ipynb)
- <img src="/img/new.png" height="20px" align="left" hspace="4px" alt="New"></img>
 [TensorFlow 2 in Colab](/notebooks/tensorflow_version.ipynb)

<a name="working-with-data"></a>
### Working with data
- [Loading data: Drive, Sheets and Google Cloud Storage](/notebooks/io.ipynb) 
- [Charts: visualising data](/notebooks/charts.ipynb)
- [Getting started with BigQuery](/notebooks/bigquery.ipynb)

### Machine learning crash course
These are a few of the notebooks from Google's online machine learning course. See the <a href="https://developers.google.com/machine-learning/crash-course/">full course website</a> for more.
- [Intro to Pandas](/notebooks/mlcc/intro_to_pandas.ipynb)
- [TensorFlow concepts](/notebooks/mlcc/tensorflow_programming_concepts.ipynb)
- [First steps with TensorFlow](/notebooks/mlcc/first_steps_with_tensor_flow.ipynb)
- [Intro to neural nets](/notebooks/mlcc/intro_to_neural_nets.ipynb)
- [Intro to sparse data and embeddings](/notebooks/mlcc/intro_to_sparse_data_and_embeddings.ipynb)

<a name="using-accelerated-hardware"></a>
### Using accelerated hardware
- [TensorFlow with GPUs](/notebooks/gpu.ipynb)
- [TensorFlow with TPUs](/notebooks/tpu.ipynb)

<a name="machine-learning-examples"></a>

## Machine learning examples

To see end-to-end examples of the interactive machine-learning analyses that Colaboratory makes possible, take a look at these tutorials using models from <a href="https://tfhub.dev">TensorFlow Hub</a>.

A few featured examples:

- <a href="https://tensorflow.org/hub/tutorials/tf2_image_retraining">Retraining an Image Classifier</a>: Build a Keras model on top of a pre-trained image classifier to distinguish flowers.
- <a href="https://tensorflow.org/hub/tutorials/tf2_text_classification">Text Classification</a>: Classify IMDB film reviews as either <em>positive</em> or <em>negative</em>.
- <a href="https://tensorflow.org/hub/tutorials/tf2_arbitrary_image_stylization">Style Transfer</a>: Use deep learning to transfer style between images.
- <a href="https://tensorflow.org/hub/tutorials/retrieval_with_tf_hub_universal_encoder_qa">Multilingual Universal Sentence Encoder Q&amp;A</a>: Use a machine-learning model to answer questions from the SQuAD dataset.
- <a href="https://tensorflow.org/hub/tutorials/tweening_conv3d">Video Interpolation</a>: Predict what happened in a video between the first and the last frame.

Coronavirus analysis is done by getting data of confirmed,deaths,recovered cases.We draw various bar graph,pie chart,line graph and tabular column to analyse and visualize the cases in various countries.
We compare the higheest number of cases in particular country with rest of countries.
We  then analyze the cases in India and draw bar,pie and line graph for visualization.
We use matplotlib,pandas,numpy,seaborn for plotting graphs,calculating active,recovered and death cases int he world.
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import time
import os
import random
import datetime
import operator
import folium
import seaborn as sns
for dirname, _, filenames in os.walk(r"C:\\Users\\Varun\\Downloads\\07-25-2020data"):
    for filename in filenames:
        print(os.path.join(dirname, filename))
import warnings
warnings.filterwarnings("ignore")
plt.style.use("fivethirtyeight")
# %matplotlib inline

today=datetime.date.today().strftime("%m-%d-%Y")
data_date=datetime.date.today()-datetime.timedelta(days=1)
print("Covid-19 Analysis on {}".format(today))
data_date=data_date.strftime("%m-%d-%Y")

confirmed_cases=pd.read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
confirmed_cases.head()

deaths_reported= pd.read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
deaths_reported.head()

recovered_cases=pd.read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")
recovered_cases.head()

from google.colab import files
uploaded = files.upload()

import io
latest = pd.read_csv(io.BytesIO(uploaded['covid_19_data.csv']))
latest.head()

print("Datasize of Confirmed_cases dataset:",confirmed_cases.shape)
print("Datasize of deaths_reported dataset:",deaths_reported.shape)
print("Datasize of recovered_cases dataset:",recovered_cases.shape)

# function to find active cases
def active(confirmed,recovered,deaths):
    activecase = [x-(y+z) for x,y,z in zip(confirmed,recovered,deaths)]
    return activecase
    
# function to find the data for the required country.
def country_cases(country,x):
    dates=confirmed.columns
    country_list=[]
    for i in dates:
        country_list.append(x[x['Country/Region']==country][i].sum())
    return country_list

# Function for daily increase cases
def daily_increase(data):
    '''function to get daily increase
    of the of the values.
    '''
    d1=[]
    for i in range(len(data)):
        if i==0:
            d1.append(data[0])
        else:
            d1.append(data[i]-data[i-1])
    return d1

cols=confirmed_cases.columns
confirmed=confirmed_cases.loc[:,cols[4]:cols[-1]]
deaths=deaths_reported.loc[:,cols[4]:cols[-1]]
recovered=recovered_cases.loc[:,cols[4]:cols[-1]]
confirmed.head()

india_cases = country_cases("India",confirmed_cases)
brazil_cases= country_cases("Brazil",confirmed_cases)
russia_cases = country_cases("Russia",confirmed_cases)
us_cases= country_cases("US",confirmed_cases)
italy_cases = country_cases("Italy",confirmed_cases)
germany_cases = country_cases("Germany",confirmed_cases)
spain_cases = country_cases("Spain",confirmed_cases)
france_cases = country_cases("France",confirmed_cases)
uk_cases = country_cases("'United Kingdem'",confirmed_cases)
russia_cases = country_cases("Russia",confirmed_cases)
peru_cases = country_cases("Peru",confirmed_cases)
chile_cases = country_cases("Chile",confirmed_cases)
mexico_cases = country_cases("Mexico",confirmed_cases)

india_deaths=country_cases("India",deaths_reported)
brazil_deaths= country_cases("Brazil",deaths_reported)
russia_deaths = country_cases("Russia",deaths_reported)
us_deaths= country_cases("US",deaths_reported)
italy_deaths = country_cases("Italy",deaths_reported)
germany_deaths = country_cases("Germany",deaths_reported)
spain_deaths = country_cases("Spain",deaths_reported)
france_deaths = country_cases("France",deaths_reported)
uk_deaths = country_cases("'United Kingdem'",deaths_reported)
russia_deaths = country_cases("Russia",deaths_reported)
peru_deaths = country_cases("Peru",deaths_reported)
chile_deaths = country_cases("Chile",deaths_reported)
mexico_deaths = country_cases("Mexico",deaths_reported)

india_recoveries = country_cases("India",recovered_cases)
brazil_recoveries= country_cases("Brazil",recovered_cases)
us_recoveries= country_cases("US",recovered_cases)
russia_recoveries = country_cases("Russia",recovered_cases)
italy_recoveries = country_cases("Italy",recovered_cases)
germany_recoveries = country_cases("Germany",recovered_cases)
spain_recoveries = country_cases("Spain",recovered_cases)
france_recoveries = country_cases("France",recovered_cases)
uk_recoveries = country_cases("'United Kingdem'",recovered_cases)
russia_recoveries = country_cases("Russia",recovered_cases)
peru_recoveries = country_cases("Peru",recovered_cases)
chile_recoveries = country_cases("Chile",recovered_cases)
mexico_recoveries = country_cases("Mexico",recovered_cases)
india_cases = country_cases("India",confirmed_cases)
india_recoveries = country_cases("India",recovered_cases)
india_deaths=country_cases("India",deaths_reported)
india_active = active_cases(india_cases,india_recoveries,india_deaths)

print("Daily Increse cases in India: ",daily_increase(india_cases)[::-1])

unique_countries=list(latest_data['Country/Region'].unique())
print( "Total No of Unique countries in dataset\n",len(unique_countries))
print("\nTotal Unique countries in datasetare:-  ",unique_countries)

country_confirmed_cases=[]
country_death_cases=[]
country_recovery_cases=[]
country_active_cases=[]
country_mortality_rate=[]
country_recovery_rate=[]

no_cases=[]
for i in unique_countries:
    cases=latest_data[latest_data['Country/Region']==i]['Confirmed'].sum()
    if cases>0:
        country_confirmed_cases.append(cases)
    else:
        no_cases.append(i)

for i in no_cases:
    unique_countries.remove(i)
#sort countries by the number of confirmed cases
unique_countries=[k for k ,v in sorted(zip(unique_countries,country_confirmed_cases),key=operator.itemgetter(1),reverse=True)]
for i in range(len(unique_countries)):
    country_confirmed_cases[i]=latest_data[latest_data['Country/Region']==unique_countries[i]]['Confirmed'].sum()
    country_death_cases.append(latest_data[latest_data['Country/Region']==unique_countries[i]]['Deaths'].sum())
    country_recovery_cases.append(latest_data[latest_data['Country/Region']==unique_countries[i]]['Recovered'].sum())
    country_active_cases.append(country_confirmed_cases[i]-country_death_cases[i]-country_recovery_cases[i])
    # Moratlity Rate=[(death cases)/confirmed cases)]
    country_mortality_rate.append(country_death_cases[i]/country_confirmed_cases[i])
    #Recovery Rate=[(recovered cases)/confirmed cases)]
    country_recovery_rate.append(country_recovery_cases[i]/country_confirmed_cases[i])

country_df=pd.DataFrame({'Country Name':unique_countries,'Number of Confirmed Cases':country_confirmed_cases,'Number of Deaths':country_death_cases,
                         'Number of Recoveries':country_recovery_cases,'Number of Active Cases':country_active_cases,'Mortality Rate':country_mortality_rate,"Recovery Rate":country_recovery_rate})
subset=country_df.columns
country_df.style.background_gradient(cmap='Oranges',subset=subset[1])\
                        .background_gradient(cmap='Blues',subset=subset[2])\
                        .background_gradient(cmap='Reds',subset=subset[3])\
                        .background_gradient(cmap='Greens',subset=subset[4])\
                        .background_gradient(cmap='Greens',subset=subset[5])\
                        .background_gradient(cmap='Greys',subset=subset[6])

country_df[country_df["Country Name"]=='India']
USA_confirmed=latest_data[latest_data["Country/Region"]=="US"]['Confirmed'].sum()
india_confirmed=latest_data[latest_data["Country/Region"]=="India"]['Confirmed'].sum()
brazil_confirmed=latest_data[latest_data["Country/Region"]=="Brazil"]['Confirmed'].sum()
Russia_confirmed=latest_data[latest_data["Country/Region"]=="Russia"]['Confirmed'].sum()
other_confirmed=np.sum(country_confirmed_cases)-(USA_confirmed+ india_confirmed+brazil_confirmed+Russia_confirmed)
other_confirmed_avg = other_confirmed+USA_confirmed+india_confirmed+brazil_confirmed+Russia_confirmed/len(unique_countries)
plt.figure(figsize=(10,5))
plt.barh("USA",USA_confirmed)
plt.barh("INDIA",india_confirmed) 
plt.barh("Brazil",brazil_confirmed)
plt.barh("Russia",Russia_confirmed)
plt.barh("Other Countries",other_confirmed)
plt.title("Number of Coronavirus Confirmed Cases",size=10)
plt.xticks(size=10)
plt.yticks(size=10)
plt.show()

print("BRAZIL: {} cases".format(brazil_confirmed))
print("INDIA: {} cases".format(india_confirmed))
print("USA: {} cases".format(USA_confirmed))
print("Russia: {} cases".format(Russia_confirmed))
print("Other Cuntries: {} cases".format(other_confirmed))
print("Total: {} cases in the world".format(brazil_confirmed+india_confirmed+USA_confirmed+Russia_confirmed+other_confirmed))
print("Total Averages: {} cases in the world".format(other_confirmed_avg))

visual_unique_countries=[]
visual_unique_countries1=[]
visaul_confirmed_cases=[]
visaul_death_cases=[]
others=np.sum(country_confirmed_cases[10:])
others1 = np.sum(country_death_cases[5:])

for i in range(len(country_confirmed_cases[:10])):
    visual_unique_countries.append(unique_countries[i])
    visaul_confirmed_cases.append(country_confirmed_cases[i])

for i in range(len(country_death_cases[:5])):
    visual_unique_countries1.append(unique_countries[i])
    visaul_death_cases.append(country_death_cases[i])

visual_unique_countries.append("Others")
visual_unique_countries1.append("Others")
visaul_confirmed_cases.append(others)
visaul_death_cases.append(others)

import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(visual_unique_countries,visaul_confirmed_cases)
plt.show()

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(visual_unique_countries1,visaul_death_cases)
plt.show()

# Creating plot 
fig = plt.figure(figsize =(10, 7)) 
plt.pie(visaul_confirmed_cases, labels = visual_unique_countries) 
  
# show plot 
plt.show()

fig = plt.figure(figsize =(10, 7)) 
plt.pie(visaul_death_cases, labels = visual_unique_countries1) 
  
# show plot 
plt.show()

confirmed_india=confirmed_cases.loc[confirmed_cases["Country/Region"]=="India"]
deaths_india=deaths_reported.loc[deaths_reported["Country/Region"]=="India"]
recovered_india=recovered_cases.loc[recovered_cases["Country/Region"]=="India"]
ind_confirm=confirmed_india.iloc[0][-1]
ind_death=deaths_india.iloc[0][-1]
ind_recover=recovered_india.iloc[0][-1]
ind_active=confirmed_india.iloc[0][-1]-deaths_india.iloc[0][-1]-recovered_india.iloc[0][-1]
print("India Confirmed cases:-",ind_confirm)
print("India total deaths:-",ind_death)
print("India Recovered cases:-",ind_recover)
print("India Active cases:-",ind_active)

x=pd.DataFrame([["Confirmed","Recovered","Active","Deaths"],[ind_confirm,ind_recover,ind_active,ind_death]])
x

fig = plt.figure()
ind = fig.add_axes([0,0,1,1])
ind.bar(x.loc[0],x.loc[1])
plt.show()

xn = range(len(x.loc[0]))
plt.plot(xn, x.loc[1])
plt.xticks(xn, x.loc[0])

variable=[confirmed_india,deaths_india,recovered_india]
colors=["y","b","g"]
title=["Confirmed cases","Deaths","Recovered Cases"]
for i in range(len(var)):
    plt.figure(figsize=(10,6))
    plt.plot(var[i].iloc[:,4:].T,color=colors[i])
    plt.xticks(rotation=90)
    plt.title(title[i])
    plt.xlim(50,)
    plt.show()

variable=[confirmed_india,deaths_india,recovered_india]
colors=["y","b","g"]
title=["Confirmed cases","Deaths","Recovered Cases"]
for i in range(len(variable)):
    plt.figure(figsize=(10,6))
    plt.plot(var[i].iloc[:,4:].T.index,daily_increase(var[i].iloc[:,4:].T.values),color=colors[i])
    plt.xticks(rotation=90)
    plt.title("Everyday increase in {} in India".format(title[i]))
    plt.xlim(50,)
    plt.show()







